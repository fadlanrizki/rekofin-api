// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  username        String           @unique
  fullName        String
  email           String           @unique
  password        String
  role            Role
  financialInputs FinancialInput[]
  histories       History[]

  @@map("user")
}

model FinancialInput {
  id                 Int                @id @default(autoincrement())
  user               User               @relation(fields: [userId], references: [id])
  userId             Int
  monthlyIncome      Float
  totalSavings       Float
  emergencyFund      Float
  debt               Float
  monthlyExpenses    Float
  riskProfile        RiskProfile
  financialPrinciple FinancialPrinciple
  createdAt          DateTime           @default(now())
  histories          History[]

  @@map("financial_input")
}

model Rule {
  id             Int                    @id @default(autoincrement())
  name           String
  conditions     Json
  categoryResult RecommendationCategory
  description    String
  active         Boolean                @default(true)
  createdAt      DateTime               @default(now())

  @@map("rule")
}

model Recommendation {
  id         Int                     @id @default(autoincrement())
  category   RecommendationCategory
  content    String
  sourceType SourceType
  sourceName String
  author     String
  histories  HistoryRecommendation[]

  @@map("recommendation")
}

model History {
  id               Int                     @id @default(autoincrement())
  user             User                    @relation(fields: [userId], references: [id])
  userId           Int
  financialInput   FinancialInput          @relation(fields: [financialInputId], references: [id])
  financialInputId Int
  categoryResult   RecommendationCategory
  createdAt        DateTime                @default(now())
  recommendations  HistoryRecommendation[]

  @@map("history")
}

model HistoryRecommendation {
  id               Int      @id @default(autoincrement())
  recommendationId Int
  historyId        Int
  createdAt        DateTime @default(now())

  recommendation Recommendation @relation(fields: [recommendationId], references: [id])
  history        History        @relation(fields: [historyId], references: [id])

  @@unique([recommendationId, historyId])
  @@map("history_recommendation")
}

enum Role {
  admin
  user
}

enum RiskProfile {
  conservative
  moderate
  aggressive
}

enum FinancialPrinciple {
  syariah
  conventional
  both
}

enum RecommendationCategory {
  menabung
  dana_darurat
  investasi
}

enum SourceType {
  book
  educational
  influencer
}
