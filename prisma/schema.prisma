// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId      Int       @id @default(autoincrement())
  username    String    @unique
  password    String
  role        Role
  fullName    String
  email       String    @unique
  occupation  String

  financialFacts        FinancialFact[]
  recommendationHistory RecommendationHistory[]
  rules                 Rule[] @relation("CreatedRules")

  @@map("user")
}

model FinancialFact {
  factId          Int     @id @default(autoincrement())
  userId          Int
  income          Float
  savings         Float
  emergencyFund   Float
  investment      Float
  debt            Float
  monthlyExpenses Float
  inputDate       DateTime

  user User @relation(fields: [userId], references: [userId])

  @@map("financial_fact")
}

model RecommendationCategory {
  categoryId   Int              @id @default(autoincrement())
  categoryName String
  description  String

  recommendations Recommendation[]
  rules           Rule[]

  @@map("recommendation_category")
}

model Recommendation {
  recommendationId Int       @id @default(autoincrement())
  categoryId       Int
  title            String
  description      String
  source           String

  category RecommendationCategory @relation(fields: [categoryId], references: [categoryId])
  history  RecommendationHistory[]

  @@map("recommendation")
}

model RecommendationHistory {
  historyId         Int       @id @default(autoincrement())
  userId            Int
  recommendationId  Int
  createdAt         DateTime  @default(now())

  user           User           @relation(fields: [userId], references: [userId])
  recommendation Recommendation @relation(fields: [recommendationId], references: [recommendationId])

  @@map("recommendation_history")
}

model Rule {
  ruleId     Int     @id @default(autoincrement())
  categoryId Int
  condition  String
  conclusion String
  createdBy  Int

  category RecommendationCategory @relation(fields: [categoryId], references: [categoryId])
  author   User                   @relation("CreatedRules", fields: [createdBy], references: [userId])

  @@map("role")
}

enum Role {
  admin
  employee
}